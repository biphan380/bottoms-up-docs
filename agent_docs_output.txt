[Document(id_='9c3ac874-3004-468b-b3e5-0252705290bc', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/modules.md', 'Content Type': 'text', 'Header Path': 'Module Guides', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='82b59653d73e8d6b9f8bc804b8b740f9dd35d687819730b4fbb3308fc5bbdad6', text='These guide provide an overview of how to use our agent classes.\n\nFor more detailed guides on how to use specific tools, check out our tools module guides.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='7b65c76b-2b60-4f84-98e1-50c2851beb19', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/modules.md', 'Content Type': 'code', 'Header Path': 'Module Guides/OpenAI Agent'}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='9b97980411df4e9a154fa738ce3b8de6875f555048f2aa1d1999bedd2e80381e', text='```{toctree}\n---\nmaxdepth: 1\n---\n/examples/agent/openai_agent.ipynb\n/examples/agent/openai_agent_with_query_engine.ipynb\n/examples/agent/openai_agent_retrieval.ipynb\n/examples/agent/openai_agent_query_cookbook.ipynb\n/examples/agent/openai_agent_query_plan.ipynb\n/examples/agent/openai_agent_context_retrieval.ipynb\n```\n', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c04b972d-6c68-46dd-b034-82e6b6f6a9c3', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/modules.md', 'Content Type': 'code', 'Header Path': 'Module Guides/ReAct Agent'}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='1561788f377c70e7fcfec71706b4ace390a9c087fa4f227ad771dc27816f03e9', text='```{toctree}\n---\nmaxdepth: 1\n---\n/examples/agent/react_agent_with_query_engine.ipynb\n```\n', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c8deb0a6-5056-46ce-a039-234276430c2b', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='2d67f4bb991a1731bec5caf3631e2a05fcc2e0c1bc7ee3e0be5b0dd10da3b43e', text='Data Agents are LLM-powered knowledge workers in LlamaIndex that can intelligently perform various tasks over your data, in both a “read” and “write” function. They are capable of the following:\n\n- Perform automated search and retrieval over different types of data - unstructured, semi-structured, and structured.\n- Calling any external service API in a structured fashion, and processing the response + storing it for later.\n\nIn that sense, agents are a step beyond our query engines in that they can not only "read" from a static source of data, but can dynamically ingest and modify data from a variety of different tools.\n\nBuilding a data agent requires the following core components:\n\n- A reasoning loop\n- Tool abstractions\n\nA data agent is initialized with set of APIs, or Tools, to interact with; these APIs can be called by the agent to return information or modify state. Given an input task, the data agent uses a reasoning loop to decide which tools to use, in which sequence, and the parameters to call each tool.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c47f7e65-aad1-4f1b-81e6-0fd3fe7aef8d', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Reasoning Loop', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='eec166510e56e44e4be2d9e506df9634d18c155eb770387850bf274727508dcc', text='The reasoning loop depends on the type of agent. We have support for the following agents: \n- OpenAI Function agent (built on top of the OpenAI Function API)\n- a ReAct agent (which works across any chat/text completion endpoint).', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='ccbd0499-0aff-4737-97b5-7a9a7474d4a9', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Tool Abstractions', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6faac30fd5c8fce64657961129b7b06772537db5909143e127a6cc697ed69a6d', text='You can learn more about our Tool abstractions in our Tools section.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='f55858fe-66da-4c28-9d3f-34d04bba8928', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Blog Post', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='a215fad721bffafd6cab941451efe903f731900932180a5bbdc7732fe39cd30a', text='For full details, please check out our detailed blog post.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='4f262a1d-4028-4ad1-bbaf-836b83b23830', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6f02149da83f68e284554593ad53a3e68d1c130e0505dd76a48893448dee92fd', text='Data agents can be used in the following manner (the example uses the OpenAI Function API)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='56663d0f-4493-404a-97b0-be2851b93560', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='7794fd4a1e74681d0ecc928f288bbbd01cdd055ef5b878a874e4ff7484e98684', text='from llama_index.agent import OpenAIAgent\nfrom llama_index.llms import OpenAI', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='318bea14-c4eb-403a-87ca-4073575b3520', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/import and define tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='fe648c6fd16de26c5671893fcb1ef7d2ecc54f16ef80b657180f68d166fec8a5', text='...', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='3d4be28c-6405-433d-b703-2c882a3b0538', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/initialize llm', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='ee71ffbe3bf070b3509c23eef7c060931e16d18959405c196c745e909f043fe9', text='llm = OpenAI(model="gpt-3.5-turbo-0613")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='da683b75-7ed4-42f7-8b6c-220b508a5148', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/initialize openai agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='36962b665c5b794bdca44d0f9d3548b7eac127da2c956fd434d2839f8f5f77a8', text='agent = OpenAIAgent.from_tools(tools, llm=llm, verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='2529ccc3-8a3b-4639-80f8-1da3637e26f6', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/initialize openai agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='0a65eb45d410f79542a7a7cf68be565d6c21aef89c9fff4cba17a8a76183b024', text='See our usage pattern guide for more details.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='40496643-bb00-4b02-b97a-fb70a84b1f86', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/initialize openai agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='ad6ac9b7d53d76d0878e882353dcd41fb78bd228d5ed2e8078497a822a0e8ad3', text='---\nmaxdepth: 1\n---\nusage_pattern.md', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='2db6b0ff-3f2e-4271-aab4-71314925081f', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Modules', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='f2566577c52f79aa9532e58b674dcd475c27e7b0725db69ee90dfc85bfa26827', text='Learn more about our different agent types in our module guides below.\n\nAlso take a look at our tools section!', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='2bb67553-c91d-465b-a6e5-77c3a904c539', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/root.md', 'Content Type': 'text', 'Header Path': 'Data Agents/Concept/Modules', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='2df9cf673fd90019bbe60e326a400f2e456724bc99bc12e9db244c716a6f24a4', text='---\nmaxdepth: 2\n---\nmodules.md', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='5a568a58-f660-40e1-9d24-a30c3d1f030a', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Get Started', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='ef677f61475fe8a9a5ab5b6882bb2709684bcf887480ee1ab6892ac1cf6c3a0c', text="An agent is initialized from a set of Tools. Here's an example of instantiating a ReAct\nagent from a set of Tools.", start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='1cfc7c20-8f6a-4cfd-adba-90c47b7099b0', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Get Started', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='90e3b75f6cf71995c9db03fa912ca5b89d8feb255aa2d0b4361059f32bf1f5d2', text='from llama_index.tools import FunctionTool\nfrom llama_index.llms import OpenAI\nfrom llama_index.agent import ReActAgent', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='75fb2e7b-ebf3-44aa-900a-cd9746277a1b', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/define sample Tool', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='5eb91dd052d4be30ac1f382d255c5e59f2ced8e595979c8d0bbfb7b192898b24', text='def multiply(a: int, b: int) -> int:\n    """Multiple two integers and returns the result integer"""\n    return a * b\n\nmultiply_tool = FunctionTool.from_defaults(fn=multiply)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='a2481542-2dbf-4d88-8aeb-d6413dab33df', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/initialize llm', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6928158bba6d2c5a07b6ccde425c9820b09862442a9febe52b94d06e8c8950b5', text='llm = OpenAI(model="gpt-3.5-turbo-0613")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='2e01fc90-c362-4c21-aeb2-ea76dfc6d8a6', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/initialize ReAct agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='a6d8286c38bc4dbdef0c0b0d73fb3666ecf73f21fcc0dabdc0a9890ae3d1a3f3', text='agent = ReActAgent.from_tools([multiply_tool], llm=llm, verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='985893a4-09f6-4d11-bce5-aa4062252efc', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/initialize ReAct agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='1ae49d2defa3989f9ddada3100e335f934ed9d7b5cf9aca342db8f66343b6c74', text='An agent supports both `chat` and `query` endpoints, inheriting from our `ChatEngine` and `QueryEngine` respectively.\n\nExample usage:', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='a51ed502-30cb-402a-991d-5da248486b0e', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/initialize ReAct agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='b4e63f9de42ddbe43f81f43dc7d32c98c4cbb974dd2dc4df8b02f33821ee8754', text='agent.chat("What is 2123 * 215123")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='addfbcd0-5785-4e87-918a-b2672794ed32', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Query Engine Tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='b3e458140a24d11d201cc606cd723308eddfae60767d2b1d79a2d2c87208c4b2', text='It is easy to wrap query engines as tools for an agent as well. Simply do the following:', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='9f28cfa5-fdc5-4fc5-afe6-b359a5cfffa8', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Query Engine Tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='a9b97fe209f30623612b22cddd846f6de258db2a5cfd6903216261d4827f5d92', text='from llama_index.agent import ReActAgent\nfrom llama_index.tools import QueryEngineTool', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='624c73e3-5f38-4371-a2a7-abb0db4c4235', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/NOTE: lyft_index and uber_index are both SimpleVectorIndex instances', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='aeb8555e1d6c99765bec493fbd19990bf4bd6ca5ec4a1072a223299ceb77bcfb', text='lyft_engine = lyft_index.as_query_engine(similarity_top_k=3)\nuber_engine = uber_index.as_query_engine(similarity_top_k=3)\n\nquery_engine_tools = [\n    QueryEngineTool(\n        query_engine=lyft_engine,\n        metadata=ToolMetadata(\n            name="lyft_10k",\n            description="Provides information about Lyft financials for year 2021. "\n            "Use a detailed plain text question as input to the tool.",\n        ),\n    ),\n    QueryEngineTool(\n        query_engine=uber_engine,\n        metadata=ToolMetadata(\n            name="uber_10k",\n            description="Provides information about Uber financials for year 2021. "\n            "Use a detailed plain text question as input to the tool.",\n        ),\n    ),\n]', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='5f2ff82a-bad7-48ee-9464-c4ff38e32292', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/initialize ReAct agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='35fa8b386d5e131459b1f0de1a9e26f1d373422238ea51d37b29a4f2696a2720', text='agent = ReActAgent.from_tools(query_engine_tools, llm=llm, verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='ca5c1f26-2a40-4305-a503-8517ea4d4341', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Use other agents as Tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='57ebd451f830b86f7625f11e4f1499b297053c62740545012748cb6411bf5ea2', text='A nifty feature of our agents is that since they inherit from `BaseQueryEngine`, you can easily define other agents as tools\nthrough our `QueryEngineTool`.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='0d5c330d-c9a3-427d-ab57-64fe9146dcdf', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Use other agents as Tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='a746aec05b7d35a230297ba4e83067060039e1748e49ac113465525dbd47a941', text='from llama_index.tools import QueryEngineTool\n\nquery_engine_tools = [\n    QueryEngineTool(\n        query_engine=sql_agent,\n        metadata=ToolMetadata(\n            name="sql_agent",\n            description="Agent that can execute SQL queries."\n        ),\n    ),\n    QueryEngineTool(\n        query_engine=gmail_agent,\n        metadata=ToolMetadata(\n            name="gmail_agent",\n            description="Tool that can send emails on Gmail."\n        ),\n    ),\n]\n\nouter_agent = ReActAgent.from_tools(query_engine_tools, llm=llm, verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='8cfc0dff-c3ff-4896-bb68-e097dab47c79', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='32eb3c99849108c84be2b77e32f429dff083e25119a581a614deeaa251bdb29e', text="You can also use agents in more advanced settings. For instance, being able to retrieve tools from an index during query-time, and\nbeing able to perform query planning over an existing set of Tools.\n\nThese are largely implemented with our `OpenAIAgent` classes (which depend on the OpenAI Function API). Support\nfor our more general `ReActAgent` is something we're actively investigating.\n\nNOTE: these are largely still in beta. The abstractions may change and become more general over time.", start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='0e52938a-e597-4ede-b2de-279449eb89ff', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/Function Retrieval Agents', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6fbf02b3819b5246911f11d1721b5d11b3404fec83846556d60ad2be447b9238', text='If the set of Tools is very large, you can create an `ObjectIndex` to index the tools, and then pass in an `ObjectRetriever` to the agent during query-time, to first dynamically retrieve the relevant tools before having the agent pick from the candidate tools.\n\nWe first build an `ObjectIndex` over an existing set of Tools.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='9d5cc210-5f70-4798-936e-2e3598ff2d8f', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/define an "object" index over these tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='c8c773f0768e4abc1dca936c1775435a5aeee3ae9b8fe00145f5e0a2019ac7af', text='from llama_index import VectorStoreIndex\nfrom llama_index.objects import ObjectIndex, SimpleToolNodeMapping\n\ntool_mapping = SimpleToolNodeMapping.from_objects(all_tools)\nobj_index = ObjectIndex.from_objects(\n    all_tools,\n    tool_mapping,\n    VectorStoreIndex,\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='ff9a1918-5358-4c1c-8526-028e5597a298', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/define an "object" index over these tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='3fec47b6be9a5040b5c71448593f0f9c52df88efaccf13991ba56d80eb3480ad', text='We then define our `FnRetrieverOpenAIAgent`:', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='42d21b5f-0f11-46b6-ab71-9a812ae9013f', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/define an "object" index over these tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='c641d65d64968afa3b43fd0b41d54ea75e5815ecf4fbce2e65d0d16a5328b99f', text='from llama_index.agent import FnRetrieverOpenAIAgent\n\nagent = FnRetrieverOpenAIAgent.from_retriever(obj_index.as_retriever(), verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='29c8f769-2439-4920-a774-3ff53febf583', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/Context Retrieval Agents', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='7dc9ff87035d917be48236e481500319915b649489537b59ac39ecce0b8ed229', text='Our context-augmented OpenAI Agent will always perform retrieval before calling any tools.\n\nThis helps to provide additional context that can help the agent better pick Tools, versus\njust trying to make a decision without any context.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='e87687d6-b004-4c5d-84c0-26f9ef3f390a', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/Context Retrieval Agents', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='87e531098fa227b4fe0ea79a0faf8f487984264c790e222db989f075bd8f5e64', text='from llama_index.schema import Document\nfrom llama_index.agent import ContextRetrieverOpenAIAgent', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='766e8ffb-c00a-49f7-8281-9e049afcbd21', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/toy index - stores a list of abbreviations', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='b8ac60fe6238e958f25bc0af42ed561ef2b4dfa50308e6ae935c90de9f9a4b62', text='texts = [\n    "Abbrevation: X = Revenue",\n    "Abbrevation: YZ = Risk Factors",\n    "Abbreviation: Z = Costs",\n]\ndocs = [Document(text=t) for t in texts]\ncontext_index = VectorStoreIndex.from_documents(docs)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='f90c6c5a-7e34-4630-adfb-686dbe2bacc3', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/add context agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='e4630dbfc27696873c245cd76465feadf47c8f1815b7f058ac6c8fca142f97c8', text='context_agent = ContextRetrieverOpenAIAgent.from_tools_and_retriever(\n    query_engine_tools, context_index.as_retriever(similarity_top_k=1), verbose=True\n)\nresponse = context_agent.chat("What is the YZ of March 2022?")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='d75b4fc4-5be4-4ccd-bf51-164b060c1814', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/Query Planning', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='20d5a70c022e40d08b1552d6e235fb6c08752b9cad1205ac87098b355f31f096', text='OpenAI Function Agents can be capable of advanced query planning. The trick is to provide the agent\nwith a `QueryPlanTool` - if the agent calls the QueryPlanTool, it is forced to infer a full Pydantic schema representing a query\nplan over a set of subtools.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='0246d37c-bb59-42df-a5f1-2b41654d5035', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/define query plan tool', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6175ee4474c04b3296704c2fff0e55f930fe2a33d58198c7a38e89ddfc69bd85', text='from llama_index.tools import QueryPlanTool\nfrom llama_index import get_response_synthesizer\n\nresponse_synthesizer = get_response_synthesizer(service_context=service_context)\nquery_plan_tool = QueryPlanTool.from_defaults(\n    query_engine_tools=[query_tool_sept, query_tool_june, query_tool_march],\n    response_synthesizer=response_synthesizer,\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='78283124-461a-4713-a29c-3a499f859588', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/initialize agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='39ec5ac04d8580bd548a0cd37f0007d185645edbdb5449dfd14ff2cc66737eff', text='agent = OpenAIAgent.from_tools(\n    [query_plan_tool],\n    max_function_calls=10,\n    llm=OpenAI(temperature=0, model="gpt-4-0613"),\n    verbose=True,\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='1184c6d6-72a3-4641-8579-b77508f14622', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/agents/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Advanced Concepts (for `OpenAIAgent`, in beta)/should output a query plan to call march, june, and september tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='f45f8085b50b1cc11abf98bf00ce07a72d7f4f242ce2c2f4298f234475bfefad', text='response = agent.query("Analyze Uber revenue growth in March, June, and September")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='441dbe0c-7ac7-4ad9-8aa9-970eadebb8f9', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='dc51bcf4c71c462884644350b1a9022d5fc32be17008fc7ba433cbf22973c722', text='We offer a rich set of Tool Specs that are offered through LlamaHub 🦙. \n!\n\nThese tool specs represent an initial curated list of services that an agent can interact with and enrich its capability to perform different actions. \n\nWe also provide a list of **utility tools** that help to abstract away pain points when designing agents to interact with different API services that return large amounts of data.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='a1150ab3-8663-4f7c-9570-c61362aab5a1', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Tool Specs', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='b978bf56eed6dd4891434220bbd0bd4437a2f2ff31e855e611abc2cd76bf9238', text='Coming soon!', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='2f88b490-8e34-47c4-862e-73a83cbc42c1', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='1baee6d06baa9f118952f528263f9293c41469001de815bb2181a6b46ac03c52', text='Oftentimes, directly querying an API can return a massive volume of data, which on its own may overflow the context window of the LLM (or at the very least unnecessarily increase the number of tokens that you are using). \n\nTo tackle this, we’ve provided an initial set of “utility tools” in LlamaHub Tools - utility tools are not conceptually tied to a given service (e.g. Gmail, Notion), but rather can augment the capabilities of existing Tools. In this particular case, utility tools help to abstract away common patterns of needing to cache/index and query data that’s returned from any API request.\n\nLet’s walk through our two main utility tools below.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='e59818ab-518e-4c1a-a439-8bcfcdcdd3df', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/OnDemandLoaderTool', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='e9bc92ed35612c437a520967ff9217934e5b3a8fa298497ea173bb083b3dc088', text='This tool turns any existing LlamaIndex data loader ( `BaseReader` class) into a tool that an agent can use. The tool can be called with all the parameters needed to trigger `load_data` from the data loader, along with a natural language query string. During execution, we first load data from the data loader, index it (for instance with a vector store), and then query it “on-demand”. All three of these steps happen in a single tool call.\n\nOftentimes this can be preferable to figuring out how to load and index API data yourself. While this may allow for data reusability, oftentimes users just need an ad-hoc index to abstract away prompt window limitations for any API call. \n\nA usage example is given below:', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='77f5ae4e-19b6-4d16-a3cd-470d5edbe31d', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/OnDemandLoaderTool', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='912b47123242bb183c8ab0aa25e350139bbe89a898ca401c2f0d67e4255a1e10', text='from llama_hub.wikipedia.base import WikipediaReader\nfrom llama_index.tools.on_demand_loader_tool import OnDemandLoaderTool\n\ntool = OnDemandLoaderTool.from_defaults(\n\treader,\n\tname="Wikipedia Tool",\n\tdescription="A tool for loading data and querying articles from Wikipedia"\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='1e7e4623-c585-4cf0-8a82-8be31df09e66', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/LoadAndSearchToolSpec', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='421dc5b2d60e05b918245bbf8025dbf040ffa890562101862eba76cc4a7408d7', text='The LoadAndSearchToolSpec takes in any existing Tool as input. As a tool spec, it implements `to_tool_list` , and when that function is called, two tools are returned: a `load` tool and then a `search` tool.\n\nThe `load` Tool execution would call the underlying Tool, and the index the output (by default with a vector index). The `search` Tool execution would take in a query string as input and call the underlying index.\n\nThis is helpful for any API endpoint that will by default return large volumes of data - for instance our WikipediaToolSpec will by default return entire Wikipedia pages, which will easily overflow most LLM context windows.\n\nExample usage is shown below:', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='7a2ec3f6-fcc7-4308-b58f-508fd77d9d7c', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/LoadAndSearchToolSpec', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='8a6183055c3390e9d8c86654b435dc020e5da64e556289c9eb7a88049b45972d', text='from llama_hub.tools.wikipedia.base import WikipediaToolSpec\nfrom llama_index.tools.tool_spec.load_and_search import LoadAndSearchToolSpec\n\nwiki_spec = WikipediaToolSpec()', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c744ddbb-c33a-4aa9-8cd1-5b2ffe2ae37e', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/Get the search wikipedia tool', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6a63acc9ba39a9534e3ccb0bb48862c1f5353b73c356c340d878678d3e8a1f71', text='tool = wiki_spec.to_tool_list()[1]', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='d7ed3d6b-c44a-452d-a7d7-23bd8d5033ef', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/llamahub_tools_guide.md', 'Content Type': 'text', 'Header Path': 'LlamaHub Tools Guide/Utility Tools/Create the Agent with load/search tools', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='0b198be914d84d4dad0c7ab70a0c849b3635425ef4399166853618b80c588a83', text='agent = OpenAIAgent.from_tools(\n LoadAndSearchToolSpec.from_defaults(\n    tool\n ).to_tool_list(), verbose=True\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='1be7b6de-6497-42b8-9847-c048572bf106', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='237f1098988fec030f81a003b4ae2b28b7a9bbbb8955902d8a21901287fc1f49', text='Having proper tool abstractions is at the core of building data agents. Defining a set of Tools is similar to defining any API interface, with the exception that these Tools are meant for agent rather than human use. We allow users to define both a **Tool** as well as a **ToolSpec** containing a series of functions under the hood. \n\nA Tool implements a very generic interface - simply define `__call__` and also return some basic metadata (name, description, function schema).\n\nA Tool Spec defines a full API specification of any service that can be converted into a list of Tools.\n\nWe offer a few different types of Tools:\n- `FunctionTool`: A function tool allows users to easily convert any user-defined function into a Tool. It can also auto-infer the function schema.\n- `QueryEngineTool`: A tool that wraps an existing query engine. Note: since our agent abstractions inherit from `BaseQueryEngine`, these tools can also wrap other agents.\n\nWe offer a rich set of Tools and Tool Specs through LlamaHub 🦙.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c39a1025-cad1-4e6c-ba4e-4a82054e9289', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Blog Post', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='7713eaa960c8b2b51e88da644f323a21e51e9f9e2d88f667d9d1802713d708d4', text='For full details, please check out our detailed blog post.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='909722d5-c5f8-4e77-a62b-6a79ff917b13', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='756b13bf00a2d51e2f1e811ad28e1ac9ac9581cb4b42bfec8eeaca81ebdb29d0', text='Our Tool Specs and Tools can be imported from the `llama-hub` package.\n\nTo use with our agent,', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='4e12d6e3-da3f-42dc-b65c-b0bcd45aa11a', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='57eb6bf7198d900f5733fbddf60c16355cba5fd33c8336398c237b9addab3e52', text='from llama_index.agent import OpenAIAgent\nfrom llama_hub.tools.gmail.base import GmailToolSpec\n\ntool_spec = GmailToolSpec()\nagent = OpenAIAgent.from_tools(tool_spec.to_tool_list(), verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c02f7cd4-38ce-4343-8529-4af5de987804', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='0f8747f388b399153013b00e65be453d18d4d72f61493c95b502cd66f4510d80', text='See our Usage Pattern Guide for more details.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='0d9260c2-62de-4d76-b6d9-609336cc6b8b', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='fa0fb1090fc0cbb8d2cbc84f43888621340a8351a2df8b10baa6a8064ce3ad12', text='---\nmaxdepth: 1\n---\nusage_pattern.md', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='5ebf2469-d91e-4fe9-9b32-388984f9d483', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/LlamaHub Tools Guide 🛠️', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='0b9adbadd067b493fc00277b26640de78b9f30987d63a1c164c7f7641f498b54', text='Check out our guide for a full overview of the Tools/Tool Specs in LlamaHub!', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='4a0437bf-b765-4403-a185-24a84b2c97ca', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/LlamaHub Tools Guide 🛠️', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='cfd379852203bab15195481f3707aa8870676080f4de3074ff2544adb0099601', text='---\nmaxdepth: 1\n---\nllamahub_tools_guide.md', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='d7da9ff1-7b0a-4e80-a4a8-a3747eb78675', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/LlamaHub Tools Guide 🛠️', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='0f17a58be01e0eea0530b6f695c1c7c1f7488eab8b1b14ff9212136076cbc44a', text='<!-- We offer a rich set of Tool Specs that are offered through LlamaHub 🦙. \nThese tool specs represent an initial curated list of services that an agent can interact with and enrich its capability to perform different actions. \n\n! -->\n\n\n<!-- ## Module Guides', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='7e0ecb08-6abf-42d1-b21b-a40e05514ee3', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/LlamaHub Tools Guide 🛠️', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='6566a2bc5d7fcfc2dccd7ac0c1126dfe97d4271dcbff7b97b3071a5f648cecf0', text='---\nmaxdepth: 1\n---\nmodules.md', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='ef6e90d6-f8c6-4b6d-b753-9e93056901f7', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/root.md', 'Content Type': 'text', 'Header Path': 'Tools/Concept/Tool Example Notebooks'}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='1c75e19e17458ff9c67f64f1bee2aa382035d347aa0485abbcefa8e61766c9d2', text='Coming soon!  -->', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='07874999-05a3-4699-9e05-77bb84280b6f', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='3df81914e6eecdc44f20aa628e5ad280fe75d6b81c7acc9c4eb387d7a90acc51', text='LlamaHub Tool Specs and Tools can be imported from the `llama-hub` package. They can be plugged into our native agents, or LangChain agents.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c3a6b7f4-4d45-45d7-9bf9-49721b3bd15a', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Using with our Agents', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='d09fdca0b06657915694fbf17ba6b03b942190291aa61b94e203d9709e1ba87c', text='To use with our OpenAIAgent,', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='cd230205-1c6b-4179-a331-85c6726e9555', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Using with our Agents', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='a9e938ff40627626ff8bc29e5bdd640a04ac9406dbdfcba8dc13359d8841f49e', text='from llama_index.agent import OpenAIAgent\nfrom llama_hub.tools.gmail.base import GmailToolSpec\n\ntool_spec = GmailToolSpec()\nagent = OpenAIAgent.from_tools(tool_spec.to_tool_list(), verbose=True)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='fd8e08b5-8de1-4005-bbb0-d1900e453b25', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/use agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='73f19f7461bb8027718dfd3d2746eb261f69778d02846c45f28f7dd8f1ca588a', text='agent.chat("Can you create a new email to helpdesk and support @example.com about a service outage")', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='de202bb6-9250-41d8-9589-45cbac343616', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/use agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='069a33d059d83fa7180edcd2f6553d3b90e2f126d1d123ebdb0028d0950823d8', text='Full Tool details can be found on our LlamaHub page. Each tool contains a "Usage" section showing how that tool can be used.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='04d3fadc-26c7-4f21-966a-8ee0bdf35e8b', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Using with LangChain', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='4f26cdefa7d76d13af6c03bee4040e2b14bd43cea5cf5a6b8e23d44e6d621bed', text='To use with a LangChain agent, simply convert tools to LangChain tools with `to_langchain_tool()`.', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='c414e94c-6626-423f-aa86-14bf40184727', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/Using with LangChain', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='104e2691ef99442db41415f0c036d55da4ba1485a1eeb3d908c4d1537fcb884c', text='tools = tool_spec.to_tool_list()\nlangchain_tools = [t.to_langchain_tool() for t in tools]', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends'), Document(id_='7b4f241e-7589-46d1-9094-abfc311311ec', embedding=None, metadata={'File Name': 'docs/core_modules/agent_modules/tools/usage_pattern.md', 'Content Type': 'text', 'Header Path': 'Usage Pattern/plug into LangChain agent', 'Links': ''}, excluded_embed_metadata_keys=[], excluded_llm_metadata_keys=[], relationships={}, hash='5c80b17fe3ef44dfafbbd291e30a12b565447c5a48d07dfe023b3bfac6822ae7', text='from langchain.agents import initialize_agent\n\nagent_executor = initialize_agent(\n    langchain_tools, llm, agent="conversational-react-description", memory=memory\n)', start_char_idx=None, end_char_idx=None, text_template='Content Metadata:\n{metadata_str}\n\nContent:\n{content}', metadata_template='{key}: {value},', metadata_seperator='seperator starts*********************************************************************seperator ends')]
